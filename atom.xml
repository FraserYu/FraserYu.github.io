<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>日拱一兵｜Java｜Spring Boot｜Java并发编程｜最新干货分享</title>
  <icon>https://dayarch.top/icon.png</icon>
  <subtitle>日拱一兵</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dayarch.top/"/>
  <updated>2020-08-02T02:06:08.105Z</updated>
  <id>https://dayarch.top/</id>
  
  <author>
    <name>tanθ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hashCode是根据对象内存地址生成的？</title>
    <link href="https://dayarch.top//p/out-of-memory-vs-memory-leak-and-hashcode.html"/>
    <id>https://dayarch.top//p/out-of-memory-vs-memory-leak-and-hashcode.html</id>
    <published>2020-08-01T11:47:46.000Z</published>
    <updated>2020-08-02T02:06:08.105Z</updated>
    
    <summary type="html">
    
      都说要重写hashcode，为什么要重写，重写与否有多大影响，内存溢出是否有hashcode的锅，hashcode是根据对象内存地址生成的？本文就给你全部答案
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java" scheme="https://dayarch.top/categories/Coding/Java/"/>
    
    
      <category term="面试" scheme="https://dayarch.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JVM" scheme="https://dayarch.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>SQLECTRON-超轻量级SQL客户端</title>
    <link href="https://dayarch.top//p/SQLECTRON-sql-client.html"/>
    <id>https://dayarch.top//p/SQLECTRON-sql-client.html</id>
    <published>2020-07-26T13:36:47.000Z</published>
    <updated>2020-07-26T13:44:30.713Z</updated>
    
    <summary type="html">
    
      SQLECTRON 是一款用 Javascript 来编写的非常轻量级的 SQL client
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="数据库-持久层-SQL" scheme="https://dayarch.top/categories/Coding/%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%8C%81%E4%B9%85%E5%B1%82-SQL/"/>
    
    
      <category term="MySQL" scheme="https://dayarch.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>java8 CompletableFuture 使用详解</title>
    <link href="https://dayarch.top//p/java8-completablefuture-tutorial.html"/>
    <id>https://dayarch.top//p/java8-completablefuture-tutorial.html</id>
    <published>2020-07-19T13:17:30.000Z</published>
    <updated>2020-07-29T03:47:02.372Z</updated>
    
    <summary type="html">
    
      Future 已经为获取多线程执行结果带来了很好的帮助，但是它依旧存在很多短板，在java1.8的版本中，CompletableFuture 的出现彻底改变了这一情况，结合Lambda的使用，让异步编程，分分钟就可以起飞
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Java Future详解与使用</title>
    <link href="https://dayarch.top//p/java-future-and-callable.html"/>
    <id>https://dayarch.top//p/java-future-and-callable.html</id>
    <published>2020-07-07T00:00:28.000Z</published>
    <updated>2020-07-07T11:34:11.916Z</updated>
    
    <summary type="html">
    
      并发编程中分工是一种常见的提升效率的编程手段，拆分任务后，如何获取子线程的执行结果，本文结合Callable的诞生以及Future 的使用以及FutureTask的源码分析，帮助大家在实际工作中提升程序运行效率
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>CountDownLatch 和 CyclicBarrier 傻傻的分不清楚？</title>
    <link href="https://dayarch.top//p/java-countdownlatch-vs-cyclicbarrier.html"/>
    <id>https://dayarch.top//p/java-countdownlatch-vs-cyclicbarrier.html</id>
    <published>2020-06-28T08:07:57.000Z</published>
    <updated>2020-06-28T08:22:00.998Z</updated>
    
    <summary type="html">
    
      并发编程的三大核心是`分工`，`同步`和`互斥`。在日常开发中，经常会碰到需要在主线程中开启多个子线程去并行的执行任务，并且主线程需要等待所有子线程执行完毕再进行汇总的场景，这就涉及到分工与同步的内容了, 分工与同步离不开 CountDownLatch 与 CyclicBarrier 的使用，本文结合精美图文以及源码分析带你彻底搞定
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Github UI 布局设计更新了，你发现了吗？</title>
    <link href="https://dayarch.top//p/github-new-ui.html"/>
    <id>https://dayarch.top//p/github-new-ui.html</id>
    <published>2020-06-24T08:10:04.000Z</published>
    <updated>2020-06-24T08:13:24.997Z</updated>
    
    <summary type="html">
    
      话不多说，先看图，你一眼应该就能看出变化了



Github 主要对 UI 设计以及 Repository 布局进行了更新，改善了访问和维护 Repository 的体验，其实主要有以下几点更新：

 1. 响应式的布局以及改进了移动端 Web 的体验
 2. 通过 Repository 侧边栏显示更多内容
 3. 能够在 Repository 侧边栏现实/隐藏 Release 版本以及 Packages 和 Environments



目前整体改动虽然不大，但这些更改会为将来的渐进式改进奠定基础，接下来也会推出暗黑模式等内容




顺便要说一下，浏览 Github 必须要有的神器 O
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Others" scheme="https://dayarch.top/categories/Coding/Others/"/>
    
    
      <category term="Github" scheme="https://dayarch.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>搞定ReentrantReadWriteLock 几道小小数学题就够了</title>
    <link href="https://dayarch.top//p/java-reentrant-read-write-lock.html"/>
    <id>https://dayarch.top//p/java-reentrant-read-write-lock.html</id>
    <published>2020-06-21T11:20:28.000Z</published>
    <updated>2020-06-24T08:12:56.938Z</updated>
    
    <summary type="html">
    
      读写锁解决了传统互斥锁应对读多写少低效的场景，它同样是应用AQS的同步器，但是既有独占式获取同步状态，又有共享式获取同步状态，本文主要描述了它是如何应用一个state做到计算两种同步状态的，以及他们获取同步状态的过程
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Java AQS共享式获取同步状态及Semaphore的应用分析</title>
    <link href="https://dayarch.top//p/java-aqs-acquireshared-and-semaphore.html"/>
    <id>https://dayarch.top//p/java-aqs-acquireshared-and-semaphore.html</id>
    <published>2020-06-13T07:05:28.000Z</published>
    <updated>2020-06-14T04:23:39.525Z</updated>
    
    <summary type="html">
    
      本文详细讲述了 Java AQS 中共享式获取同步状态的过程，通过该过程了解 Semaphore 的经典应用
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Java AQS队列同步器以及ReentrantLock的应用</title>
    <link href="https://dayarch.top//p/java-aqs-and-reentrantlock.html"/>
    <id>https://dayarch.top//p/java-aqs-and-reentrantlock.html</id>
    <published>2020-05-31T12:26:08.000Z</published>
    <updated>2020-06-02T11:41:19.518Z</updated>
    
    <summary type="html">
    
      想要很好的理解 JUC 的源码和其设计思想，个人觉得第一步是了解 AQS，里面提供了大量的锁实现，常见的ReentrantLock, Semphore, CountLatch 等都是在其基础上做了定制，所以了解 AQS 才不会丢失主线，阅读源码会越发轻松
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程中断机制</title>
    <link href="https://dayarch.top//p/java-concurrency-interrupt-mechnism.html"/>
    <id>https://dayarch.top//p/java-concurrency-interrupt-mechnism.html</id>
    <published>2020-05-17T05:50:15.000Z</published>
    <updated>2020-05-17T06:09:50.249Z</updated>
    
    <summary type="html">
    
      Java并发编程中断机制贯穿并发编程整个环节，其实它是一种协同机制，为我们提供了更优雅以及更灵活的处理方式，理解中断机制也会对阅读源码有更大的帮助
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 配置和插件合集</title>
    <link href="https://dayarch.top//p/intellij-idea-configuration-and-plugins.html"/>
    <id>https://dayarch.top//p/intellij-idea-configuration-and-plugins.html</id>
    <published>2020-05-03T01:43:47.000Z</published>
    <updated>2020-05-03T03:06:59.310Z</updated>
    
    <summary type="html">
    
      高效的使用 IDEA 进行开发离不开好的配置和插件，本文会陆续更新和整理那些可以大大提高编码效率的配置
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java" scheme="https://dayarch.top/categories/Coding/Java/"/>
    
    
      <category term="IntelliJ IDEA" scheme="https://dayarch.top/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>为什么要使用线程池?</title>
    <link href="https://dayarch.top//p/why-we-need-to-use-threadpool.html"/>
    <id>https://dayarch.top//p/why-we-need-to-use-threadpool.html</id>
    <published>2020-04-19T07:17:38.000Z</published>
    <updated>2020-04-22T00:29:08.547Z</updated>
    
    <summary type="html">
    
      我们会使用三种方式手动创建线程，为什么不允许随意创建线程，而要求使用线程池呢？因为手动创建线程的不可控风险和大的开销是我们不能承受的，所以需要线程池，通过最大化收益，同时最小化风险，将线程资源统一管理起来
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>如何清爽的安排日常？</title>
    <link href="https://dayarch.top//p/how-to-organize-your-day.html"/>
    <id>https://dayarch.top//p/how-to-organize-your-day.html</id>
    <published>2020-04-12T08:01:18.000Z</published>
    <updated>2020-04-15T00:16:02.641Z</updated>
    
    <summary type="html">
    
      有朋友私信问我如何安排日常，以及相对高效的写东西？我觉得有必要单独写一篇文章来和大家交流这个事

不做没有灵魂的 TODO List
我们都是上进的好青年，大家手里应该都有自己的 TODO list，我通常会用 Microsoft To Do 这款软件做简单的日常安排



求学期间，每个寒暑假临近，我都可以把做各种 plan，立各种 flag 的气质拿捏的死死的。如你所料，假期过后一个 plan 都没有做，一个 flag 都没有完成。

这种表面风光，实则没有了灵魂TODO list 只是短期心理慰藉，当需要验证结果时，情绪轻则低落一会，重则焦虑半天

造成这种问题的原因很简单

 * 大杂
    
    </summary>
    
    
      <category term="Life" scheme="https://dayarch.top/categories/Life/"/>
    
      <category term="其他" scheme="https://dayarch.top/categories/Life/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="总结" scheme="https://dayarch.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>面试问，创建多少个线程合适？</title>
    <link href="https://dayarch.top//p/how-many-threads-should-be-created.html"/>
    <id>https://dayarch.top//p/how-many-threads-should-be-created.html</id>
    <published>2020-04-06T13:02:39.000Z</published>
    <updated>2020-04-08T08:58:56.737Z</updated>
    
    <summary type="html">
    
      面试过程中总会问到创建多少个线程合适？是否使用多线程就一定能提高效率？如何快速的应用理论值？又如何做实际的计算？调优的前提是什么？本文都会带你透彻了解
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Java线程生命周期这样理解挺简单的</title>
    <link href="https://dayarch.top//p/java-thread-life-cycle.html"/>
    <id>https://dayarch.top//p/java-thread-life-cycle.html</id>
    <published>2020-03-25T06:32:03.000Z</published>
    <updated>2020-03-25T07:19:39.290Z</updated>
    
    <summary type="html">
    
      了解Java线程的生命周期是编写并发程序的基础，如何透彻的理解，它们的状态如何转换，如果你始终不能理解或记忆这些问题，相信这篇文章会帮你解惑
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>并发编程之等待通知机制</title>
    <link href="https://dayarch.top//p/waiting-notification-mechanism.html"/>
    <id>https://dayarch.top//p/waiting-notification-mechanism.html</id>
    <published>2020-03-15T07:47:24.000Z</published>
    <updated>2020-03-15T08:07:45.452Z</updated>
    
    <summary type="html">
    
      等待通知机制可以人为是一种设计模式，不只应用在并发编程领域，但是懂得如何使用这个机制是并发编程必不可少的技能
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>volatile和synchronized图文透彻讲解</title>
    <link href="https://dayarch.top//p/difference-between-volatile-and-synchronized-keyword.html"/>
    <id>https://dayarch.top//p/difference-between-volatile-and-synchronized-keyword.html</id>
    <published>2020-03-04T03:37:38.000Z</published>
    <updated>2020-03-04T03:51:00.887Z</updated>
    
    <summary type="html">
    
      volatile 和 synchronized 是并发编程中非常常见的两个关键字，但是很多人却很难区分二者的区别以及如何准确的使用，本文就通过图问的形式，带你一步一步剖析二者的差别
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/categories/Coding/Java-Concurrency/"/>
    
    
      <category term="Java-Concurrency" scheme="https://dayarch.top/tags/Java-Concurrency/"/>
    
      <category term="volatile" scheme="https://dayarch.top/tags/volatile/"/>
    
      <category term="synchronized" scheme="https://dayarch.top/tags/synchronized/"/>
    
  </entry>
  
  <entry>
    <title>Java后端的我在学Node.js 你敢信？</title>
    <link href="https://dayarch.top//p/start-to-learn-nodejs.html"/>
    <id>https://dayarch.top//p/start-to-learn-nodejs.html</id>
    <published>2020-02-27T00:40:40.482Z</published>
    <updated>2020-02-27T01:01:23.540Z</updated>
    
    <summary type="html">
    
      作为一名纯java后端的人员，由于项目需要，我要开始学Node.js 了，对于要接触陌生的东西，内心其实是抗拒的，但是我提醒自己要跳出舒适区，多学一些东西，本文就是记录我是如何开始接触和学习Node.js 的
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Node.js" scheme="https://dayarch.top/categories/Coding/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>闲着无聊考个PMP玩玩</title>
    <link href="https://dayarch.top//p/pmp-certificate.html"/>
    <id>https://dayarch.top//p/pmp-certificate.html</id>
    <published>2020-02-11T03:17:05.000Z</published>
    <updated>2020-02-11T03:18:15.436Z</updated>
    
    <summary type="html">
    
      本已将PMP考试记录在2019年年终总结的事件之一里了，春节有朋友问我，想让我分享一下，我回想了整个过程还是挺有趣的，于是本文就以纪实的形式写写考PMP的那点事，有兴趣的可以私聊，避免说广告

PMP（Project Management Professional）学名「项目管理专家」，我叫它「拍马屁」。2019年4月的时候在朋友圈看到有两位朋友先后【注意是先后，有埋伏】晒出来PMP的证件出来，看着挺好看的（文末有，还是纪念版，这个理由好牵强），就果断去骚扰了他们询问具体情况

朋友A：有的公司认可这个证件，没事考个还挺有用的。

朋友B：考试险过，不知道有没有用，有朋友考，一起跟着考了

心
    
    </summary>
    
    
      <category term="Life" scheme="https://dayarch.top/categories/Life/"/>
    
      <category term="其他" scheme="https://dayarch.top/categories/Life/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="总结" scheme="https://dayarch.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java 12 新特性一览</title>
    <link href="https://dayarch.top//p/jdk12-new-feature-overview.html"/>
    <id>https://dayarch.top//p/jdk12-new-feature-overview.html</id>
    <published>2020-02-10T06:30:27.000Z</published>
    <updated>2020-02-10T06:45:45.751Z</updated>
    
    <summary type="html">
    
      本文介绍了几个比较常见，又方便使用的Java12新特性，包括String API的更改，文件的比较，Switch语句的扩展等
    
    </summary>
    
    
      <category term="Coding" scheme="https://dayarch.top/categories/Coding/"/>
    
      <category term="Java" scheme="https://dayarch.top/categories/Coding/Java/"/>
    
    
      <category term="Java" scheme="https://dayarch.top/tags/Java/"/>
    
  </entry>
  
</feed>
